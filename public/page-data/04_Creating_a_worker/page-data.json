{"componentChunkName":"component---src-templates-post-template-js","path":"/04_Creating_a_worker","result":{"data":{"markdownRemark":{"fields":{"slug":"/04_Creating_a_worker"},"id":"75fe4d56-fab8-54d2-ab80-403a2173c9ef","html":"<p>You can create your workers from scratch using the Graphql schema. Or you can use the few utilities functions available to quickly setup a worker.</p>\n<hr>\n<h2 id=\"checkforjobs\" style=\"position:relative;\"><a href=\"#checkforjobs\" aria-label=\"checkforjobs permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>checkForJobs()</h2>\n<pre><code class=\"language-typescript\">// Create an ApolloClient that uses your endpoint url\n// Here it is using the default url provided by the out-of-the-box server\nimport {ApolloClient} from \"@apollo/client\";\n\nconst client = New ApolloClient({uri : 'http://localhost:8080/graphql'})\nâ€‹\nconst job = await checkForJobs({\n  typeList: ['myJobType'],\n  client,\n  processingFunction: async (job) => {\n    const result = await myApiCall()\n    return myProcessingFunction(result)\n  }\n})\n</code></pre>\n<ul>\n<li><strong>typeList</strong> (Array<String>) is the type of jobs the worker will wait to execute.</li>\n<li><strong>client</strong> (ApolloClient) is a client with the URL of your GraphQL endpoint.</li>\n<li><strong>processingFunction</strong> (Function(job, facilities) => Promise<JsonObject>) is the function that executes the job.</li>\n<li>workerId = undefined</li>\n<li>looping = true</li>\n<li>loopTime = 1000</li>\n</ul>\n<p>When processingFunction return something, the job is considered as done. The returned Object is serialized and stored as the \"output\" of the job.</p>\n<hr>\n<h3 id=\"easy-debug-without-looping\" style=\"position:relative;\"><a href=\"#easy-debug-without-looping\" aria-label=\"easy debug without looping permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Easy debug without looping</h3>\n<p>With the looping option to <strong>false</strong> the worker will only check for a job once. Made for end-to-end tests or manual debugging.</p>\n<pre><code class=\"language-typescript\">const job = await checkForJobs({\n...,\nprocessingFunction: ...,\nlooping: false\n})\n</code></pre>\n<hr>\n<h2 id=\"facilities\" style=\"position:relative;\"><a href=\"#facilities\" aria-label=\"facilities permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Facilities</h2>\n<hr>\n<h3 id=\"updateprocessinginfo\" style=\"position:relative;\"><a href=\"#updateprocessinginfo\" aria-label=\"updateprocessinginfo permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>updateProcessingInfo()</h3>\n<pre><code class=\"language-typescript\">const job = await checkForJobs({\n  typeList: ['myJobType'],\n  client,\n  processingFunction: async (job, { updateProcessingInfo }) => {\n    await updateProcessingInfo({ percent: 10 })\n  },\n  looping: false,\n})\n</code></pre>\n<hr>\n<h2 id=\"avoiding-spamming-your-api\" style=\"position:relative;\"><a href=\"#avoiding-spamming-your-api\" aria-label=\"avoiding spamming your api permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Avoiding spamming your API</h2>\n<p>Some jobs runs very rarely, so you may want that your worker only check the queue from time to time.</p>\n<pre><code class=\"language-typescript\">const job = await checkForJobs({\n...,\nprocessingFunction: ...,\nloopTime: 60 \\* 1000 // Every minute\n})\n</code></pre>\n<hr>\n<h2 id=\"identifying-workers\" style=\"position:relative;\"><a href=\"#identifying-workers\" aria-label=\"identifying workers permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Identifying workers</h2>\n<p>GNJ automatically generated uuid for your new workers to easily track what went wrong. But if you need to link a run to an id your want you can just specify it under the <strong>workerId</strong> property.</p>\n<pre><code class=\"language-typescript\">const job = await checkForJobs({\n...,\nprocessingFunction: ...,\nworkerId: 'manualCallPreMigration'\n})\n</code></pre>\n<p>They all use the GraphQL api provided by the server. So even if it's really convenient to use those functions you can create your own.</p>","frontmatter":{"date":null,"title":"Creating a worker","sidebar":"Documentation","showTitle":true,"hideAnchor":false}}},"pageContext":{}},"staticQueryHashes":["1936182646","3649515864","582252603"]}