{"componentChunkName":"component---src-templates-post-template-js","path":"/06_Plugin_the_server_to_your_express","result":{"data":{"markdownRemark":{"fields":{"slug":"/06_Plugin_the_server_to_your_express"},"id":"d0875102-0e18-5814-ae54-e32b43d1a012","html":"<h2 id=\"getapolloserver\" style=\"position:relative;\"><a href=\"#getapolloserver\" aria-label=\"getapolloserver permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>getApolloServer</h2>\n<p>Call the function <strong>getApolloServer</strong> to get an instance of GNJ GraphQL server.\nHere is a full example of a GNJ server plugged to an express app, including live subscription.</p>\n<pre><code class=\"language-javascript\">const { expressMiddleware } = require('@apollo/server/express4')\nconst express = require('express')\nconst http = require('http')\nconst cors = require('cors')\nconst json = require('body-parser')\nconst { createContext, EXPECTED_OPTIONS_KEY } = require('dataloader-sequelize')\nconst setupServer = require('./schema')\nconst models = require('./models') //Assuming \"models\" is your import of the Sequelize models folder, initialized by Sequelize-Cli\nconst { PubSub } = require('graphql-subscriptions')\nconst { getApolloServer } = require('graphql-node-jobs')\nconst { WebSocketServer } = require('ws')\n\nconst createServer = async (options = {}, globalPreCallback = () => null) => {\n  const app = express()\n  options = {\n    spdy: { plain: true },\n    ...options,\n  }\n  const httpServer = http.createServer(options, app)\n\n  // assume that we have already an apollo server running in your project\n  const { server } = setupServer(globalPreCallback, httpServer)\n  await server.start()\n  //server.applyMiddleware({ app, path: '/graphql' })\n  app.use(\n    '/graphql',\n    cors(),\n    json(),\n    expressMiddleware(server, {\n      context: async ({ req, connection }) => {\n        const contextDataloader = createContext(models.sequelize)\n\n        // Connection is provided when a webSocket is connected.\n        if (connection) {\n          // check connection for metadata\n          return {\n            ...connection.context,\n            [EXPECTED_OPTIONS_KEY]: contextDataloader,\n          }\n        }\n      },\n    })\n  )\n\n  const pubSubInstance = new PubSub()\n  //here we instantiate a websocket server for GNJ\n  const wsServer = new WebSocketServer({\n    // This is the `httpServer` we created in a previous step.\n    server: httpServer,\n    // Pass a different path here if app.use\n    // serves expressMiddleware at a different path\n    path: '/jobs/graphq',\n  })\n\n  // your sequelizeConfiguration\n  const config = require('./config/config.js')\n\n  // init GNJ server and starting it\n  const jobsServer = await getApolloServer(config, {\n    wsServer,\n    pubSubInstance,\n    playground: true,\n  })\n\n  //start\n  await jobsServer.start()\n\n  //serving the GNJ server in a specifique route using the expressMiddleware\n  app.use('/jobs/graphql', cors(), json(), expressMiddleware(jobsServer, {}))\n\n  await new Promise(resolve => {\n    httpServer.listen(process.env.PORT || 8080, () => {\n      resolve()\n    })\n\n    console.log(\n      `ðŸš€ Server ready at http://localhost:${process.env.PORT || 8080}/graphql`\n    )\n  })\n  return httpServer\n}\n\nconst closeServer = async server => {\n  await Promise.all([new Promise(resolve => server.close(() => resolve()))])\n}\n\ncreateServer()\n</code></pre>\n<hr>\n<h3 id=\"you-can-add-custom-mutations-to-the-gnj-server\" style=\"position:relative;\"><a href=\"#you-can-add-custom-mutations-to-the-gnj-server\" aria-label=\"you can add custom mutations to the gnj server permalink\" class=\"post-toc-anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>You can add custom mutations to the GNJ server.</h3>\n<pre><code class=\"language-javascript\">return getApolloServer(\n  dbConfig,\n  // Apollo server config: cache, extensions and co.\n  {},\n  // You can add custom mutations if needed\n  {\n    customAcquire: {\n      type: new GraphQLObjectType({\n        name: 'customAcquire',\n        fields: {\n          id: { type: GraphQLInt },\n        },\n      }),\n      args: {\n        typeList: {\n          type: new GraphQLList(GraphQLString),\n        },\n      },\n      resolve: async (source, args, context) => {\n        // GNJ models can be retreived with the dbConfig if needed\n        const models = getModels(dbConfig)\n        // get a job from the db\n        const job = await models.job.findByPk(1)\n        return job\n      },\n    },\n  }\n)\n</code></pre>","frontmatter":{"date":null,"title":"Plugin the server to your express","sidebar":"Documentation","showTitle":true,"hideAnchor":false}}},"pageContext":{}},"staticQueryHashes":["1936182646","3649515864","582252603"]}